@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using StudentSystem.Client.Services.AnnouncementServices
@inject NavigationManager NavigationManager 
@inject IClientAnnouncementService ClientAnnouncementService
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>

        <MudText Typo="Typo.h2">Welcome, @context.User?.Identity?.Name</MudText>
        </Authorized>
</AuthorizeView>


@if (isConnected)
{
    @foreach (var message in messages)
    {
        <MudCard Class="mt-2">
            <MudCardContent>
                <MudText>Announcement of the Day</MudText>
                <MudText Typo="Typo.body2">@message</MudText>
                </MudCardContent>
            </MudCard>
    }
}

@code {
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private List<Announcement> annoucements = new List<Announcement>();

    private Announcement input = new Announcement();

    private string? announcementInput;

    protected override async Task OnInitializedAsync()
    {
        // Instance of Hub Connection

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/announcementhub"))
        .Build();

        annoucements = await ClientAnnouncementService.GetAllAnnoucements();

        // Add the fetched announcements to the messages list
        foreach (var announcement in annoucements)
        {
            messages.Add(announcement.Message);
        }

        hubConnection.On<string>("ReceiveAnnouncement", (message) =>
        {
            var encodedMessage = $"{message}";
            messages.Add(encodedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    public bool isConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
