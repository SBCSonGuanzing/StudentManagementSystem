@page "/group-chat"
@page "/group-chat/{GroupChatId:int}"

@using StudentSystem.Client.Services.ChatServices
@using StudentSystem.Client.Services.GroupChatServices
@using StudentSystem.Client.Services.UserServices
@using Microsoft.JSInterop;

@inject IDialogService DialogService

@inject IClientChatService ClientChatService
@inject IClientUserService ClientUserService
@inject IClientGroupChatService ClientGroupChatService
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveWebAssembly

@if(isLoading)
{
    
}else
{
    
<div class="d-flex flex-grow-1 flex-row">

    <!--Group Chat Rooms-->

    <MudPaper Elevation="25" Class="pa-4 ml-6 mud-theme-primary col-md-3">
        <MudToolBar Dense="true" Class="d-flex justify-content-around">
            <MudIcon Icon="@Icons.Material.Filled.Groups" />
            <MudText Typo="Typo.h6">Chat Rooms</MudText>
            <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.AddCircle"/>            
            </MudButton>        
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                    <MudList Clickable="true">
                        @foreach (var group in Groups)
                        {
                            <MudListItem id="@group.Id" OnClick="@(() => LoadUserChat(group.Id))">@group.Name</MudListItem>
                            <MudDivider />
                        }
                    </MudList>

            </MudList>
        </div>
    </MudPaper>

    <!--Group Chat Convo-->

    <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-5">
        <MudToolBar Dense="true" Class="d-flex justify-content-between">
            @if (string.IsNullOrEmpty(GroupChatId.ToString()))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person"
                         Style="margin-right:10px" />
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {          
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble"
                            Style="margin-right:10px" />

                @if(!IsEditing)
                {
                        <MudText Typo="Typo.h6">@GroupName</MudText>
                }
                else
                {
                        <MudTextField @bind-Value="@GroupName" />
                } 
                   
                <div> 
                    <MudButton OnClick="ToggleEditMode"
                                StartIcon="@Icons.Material.Filled.Edit"
                                ButtonType="ButtonType.Button"
                                >
                    </MudButton>
                    <MudButton OnClick="@(() => DeleteGroupAsync(GroupChatId))"
                                StartIcon="@Icons.Material.Filled.Delete"
                                ButtonType="ButtonType.Button"
                    >
                    </MudButton>               
                </div>
            }
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height: 65vh; min-height: 65vh; overflow: scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                    Console.WriteLine(message.Id);
                    <div class="d-flex flex-row my-4 @((message?.User?.Id.ToString() == CurrentUserId) ? "justify-content-end" : "")">
                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                            <MudImage Src="@message.User.Avatar"></MudImage>
                        </MudAvatar>
                    </div>
                    <div class="@((message?.User?.Id.ToString() == CurrentUserId) ? "text-right" : "")">
                        <MudText Typo="Typo.body1">@message.User.Email</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Timestamp</MudText>
                            <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                @message.Content
                            </MudText>
                    </div>
                </div>
            }
        </div>

        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string"
                          Placeholder="Enter your message..."
                          DisableUnderLine="true"
                          Class="mt-n2 mx-4"
                          @bind-Value="CurrentMessage"
                          For="@(()=> CurrentMessage)" />

            <MudButton OnClick="SendMessageAsync"
                       StartIcon="@Icons.Material.Outlined.Send"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Button"
                        Disabled = "@isSelected">
                Send
            </MudButton>
        </MudPaper>

    </MudPaper>

    <!--Group Chat Members-->
     
    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-4">
        <MudToolBar Dense="true" Class="d-flex">
        <MudIcon Icon="@Icons.Material.Filled.PermContactCalendar" Style="margin-right:10px" />
        <MudText Typo="Typo.h6">Members</MudText>
    </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <div class="d-flex">
                <MudSelect T="int" Label="Users" MultiSelection="true" @bind-SelectedValues="selectedUserIds">@foreach (User user in Users) 
                      { <MudSelectItem T="int" Value="@user.Id">@user.Email</MudSelectItem> } 
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => AddUser(selectedUserIds, GroupChatId))">
                    <MudIcon Icon="@Icons.Material.Filled.Add" />
                </MudButton>
            </div>

            <MudList Clickable="true">
                @foreach (var user in Members.users)
                {
                    @if (user.Id == Members.OwnerId) continue;

                    
                    <MudListItem Class="pa-2">
                        <div class="d-flex align-items-center">
                            <div class="mr-3">
                                <MudBadge Content="3" Overlap="true" Class="my-4">
                                    <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">
                                        <MudImage Src="@user.Avatar"></MudImage>
                                    </MudAvatar>
                                </MudBadge>
                            </div>
                            <div>
                            <MudText Typo="Typo.body2" Class="mb-2">@user.Email</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: x-small!important;">@user.Id</MudText>
                            </div>

                                @if (int.Parse(CurrentUserId) == Members.OwnerId)
                                {
                                    <div class="ml-auto">
                                        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="@(() => DeleteUser(user.Id, GroupChatId))" >
                                            <MudIcon Icon="@Icons.Material.Filled.Delete" />
                                        </MudButton>
                                    </div>
                                
                                }
                        </div>
                    </MudListItem>
                }
            </MudList>

        </div> 
    </MudPaper>

</div>
}

@code {

    [Parameter]
    public int GroupChatId { get; set; }

    [CascadingParameter]
    private HubConnection hubConnection { get; set; }

    private bool isLoading { get; set; } = true;

    public string CurrentMessage { get; set; }
    public string CurrentUserId { get; set; }
    public string CurrentUserEmail { get; set; }
    public string GroupName { get; set; }
    private IEnumerable<int> selectedUserIds { get; set; } = new HashSet<int>();

    public bool isSelected;
    private string userInput;
    private string groupInput;

    public List<User> Users = new List<User>();
    private int selectedUserId = 0;

    private List<GroupChatMessage> messages = new List<GroupChatMessage>();
    public List<GroupChat> Groups = new List<GroupChat>();
    public GetChatMembersDTO Members = new GetChatMembersDTO();

    bool IsEditing { get; set; } = false;

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogResult? result = await DialogService.Show<Dialog>("Create Room", parameters, closeOnEscapeKey).Result;


        if (result != null && !result.Cancelled)
        {
            var data = result.Data as GroupChatDTO;

            groupInput = data?.Name;
            Console.WriteLine(groupInput);

            var selectedIds = data?.MembersId;
            await CreateGroupAsync(groupInput, selectedIds);
        }
        else
        {
            Console.WriteLine("Dialog was closed or canceled.");
        }
    }

    async Task LoadUserChat(int groupChatId)
    {

        if(GroupChatId != 0)
        {
            isSelected = false;
        }

        if (hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine($"Connected: Connection ID: {hubConnection.ConnectionId}");

            var groupName = await ClientGroupChatService.GetGroupName(GroupChatId);
            StateHasChanged();

            Console.WriteLine(groupName);

            if (GroupChatId != 0)
            {
                await hubConnection.SendAsync("RemoveGroup", groupName);
            }

            GroupChatId = groupChatId;

            string passGroupName = await ClientGroupChatService.GetGroupName(GroupChatId);



            await hubConnection.SendAsync("JoinGroup", passGroupName);
            NavigationManager.NavigateTo($"group-chat/{GroupChatId}");

            messages = new List<GroupChatMessage>();
            messages = await ClientGroupChatService.GetConversationAsync(groupChatId);
            Members = await ClientGroupChatService.GetGroupChatMembers(groupChatId);
            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);

            // Console.WriteLine(await GetAccessTokenAsync());

            GroupName = await ClientGroupChatService.GetGroupName(groupChatId);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(GroupChatId == 0)
        {
            isSelected = true;
        } else
        {
            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
            isSelected = false;
        }

        CurrentUserId = await ClientUserService.GetUserId();
        Groups = await ClientGroupChatService.GetAllGroup();
        CurrentUserEmail = await ClientUserService.GetUserEmail();


        StateHasChanged();

        string token = await _localStorage.GetItemAsStringAsync("token");
        string foo = "Bearer " + token.Replace("\"", "");

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat-hub"), options =>
            {
                options.AccessTokenProvider = async () => options.Headers["Foo"] = "Bar";

            }).WithAutomaticReconnect().Build();

        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {  
            await hubConnection.StartAsync();
        } 

        await hubConnection.SendAsync("GetEmail", CurrentUserEmail);

        hubConnection.On<GroupChat>("ReceivedGroupName", async (input) =>
        {
            Groups.Add(input);
            StateHasChanged();
        });
        
        hubConnection.On<GroupChatMessage>("ReceivedGroupMessage", async (message) =>
        {

            if (GroupChatId == message.GroupChatId)
            {
                messages.Add(new GroupChatMessage
                    {
                        Content = message.Content,
                        Timestamp = message.Timestamp,
                        User = message.User
                });
            }
            StateHasChanged();        
        });


        hubConnection.On<User>("ReceiveUserToAdd", async (message) =>
        {
            Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

            Members.users.Add(new User
                {
                    Email = message.Email,
                    Avatar = message.Avatar,
                    Id = message.Id
                });

            StateHasChanged();
        });

        hubConnection.On<int>("ReceiveUserToRemove", async (userId) =>
        {
            Members.users.RemoveAll(user => user.Id == userId);
            StateHasChanged();
        }); 

        hubConnection.On<int>("ReceiveGroupToRemove", async (groupChatId) =>
        {
            Console.WriteLine("GroupID: ", groupChatId);
            Groups.RemoveAll(group => group.Id == groupChatId);
            NavigationManager.NavigateTo("/group-chat");
            Members.users.Clear();
            Users.Clear();
            messages.Clear();
            GroupName = "";
            ((HashSet<int>)selectedUserIds).Clear();
            ((HashSet<int>)selectedUserIds).Add(0);
            StateHasChanged(); 
        });

        hubConnection.On<int, GroupToUpdate>("ReceiveGroupToUpdate", async (groupId, request) =>
        {
            var groupChatToUpdate = Groups.FirstOrDefault(g => g.Id == groupId);

            if (groupChatToUpdate != null)
            {
                groupChatToUpdate.Name = request.Name;
                StateHasChanged(); 
                Console.WriteLine("Group updated: " + groupChatToUpdate.Name);
            }
        });

        if (GroupChatId != 0)
        {
            await LoadUserChat(GroupChatId);
        }

        isLoading = false;
    }

    public async Task SendMessageAsync()
    {
        string currentGroup = await ClientGroupChatService.GetGroupName(GroupChatId);

        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && GroupChatId != 0)
            {
                var chatHistory = new GroupChatMessage()
                    {
                        Timestamp = DateTime.Now,
                        Content = CurrentMessage,
                        GroupChatId = GroupChatId,
                        UserId = int.Parse(CurrentUserId)
                    };


                await ClientGroupChatService.SaveMessagesAsync(chatHistory);
                StateHasChanged();
                var user = await ClientGroupChatService.GetUserDetailsAsync(int.Parse(CurrentUserId));

                chatHistory.User = user;

                await hubConnection.SendAsync("SendMessageToGroup", currentGroup, chatHistory);

                CurrentMessage = string.Empty;
            }

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine("Connection is not active.");
        }
    }

    private async Task CreateGroupAsync(string groupName, List<int>? selectedUsers)
    {
        GroupChatDTO input = new GroupChatDTO()
            {
                Name = groupName,
                MembersId = selectedUsers ?? new List<int>()
            };

        var result = await ClientGroupChatService.CreateGroupChat(input);

        if (selectedUsers != null && selectedUsers.Any())
        {
            foreach (var userId in selectedUsers)
            {
                Console.WriteLine($"Selected User ID: {userId}");
                var userDetails = await ClientGroupChatService.GetUserDetailsAsync(userId);
                Console.WriteLine($"Selected User: {userDetails.Id}, {userDetails.Email}");
            }
        }

        if(result != null)
        {
            await hubConnection.SendAsync("CreateGroup", input);
        }
    }

    private async Task AddUser(IEnumerable<int> userIds, int groupChatId)
    {
        try
        {
            foreach (var userId in userIds)
            {
                var newUser = new AddUserToGroupDTO()
                    {
                        UserId = userId,
                        GroupChatId = groupChatId
                    };

                Console.WriteLine($"Added User: {newUser.UserId}");

                var result = await ClientGroupChatService.AddUserToGroup(newUser);

                if(result != null)
                {
                    string currentGroup = await ClientGroupChatService.GetGroupName(groupChatId);
                    var userToAdd = await ClientGroupChatService.GetUserDetailsAsync(userId);

                    await hubConnection.SendAsync("AddToGroup", currentGroup, userToAdd);                     
                }
            }

            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
            StateHasChanged();
        }

        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred wh ile adding users to the group: {ex.Message}");

            _snackbar.Add(
                "An error occurred while adding users to the group.",
                Severity.Error,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
        }
    }

    async Task DeleteUser(int userId, int groupChatId)
    {
        string groupName = await ClientGroupChatService.GetGroupName(groupChatId);
        string user = userId.ToString();

        if (hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine("Connected to Signal R Hub");
            Console.WriteLine("Group Name: " + groupName);
            Console.WriteLine("User ID: " + userId);

            await hubConnection.SendAsync("RemoveUserGroup", groupName, user);
        }

        await Task.Delay(1000); 

        Members.users.RemoveAll(u => u.Id == userId);
        StateHasChanged();

        var result = await ClientGroupChatService.RemoveUserToGroup(userId, groupChatId);
        StateHasChanged();

        Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
        StateHasChanged();
    }


    async Task DeleteGroupAsync(int groupChatId)
    {

        Console.WriteLine(groupChatId);
        try
        {
            var groupName = await ClientGroupChatService.GetGroupName(groupChatId);
            if (groupName == null)
            {
                Console.Write("No group Name");
            }

            var userId = int.Parse(CurrentUserId);

            if (hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Connected to Signal R Hub");

                    await ClientGroupChatService.RemoveGroupChat(groupChatId);
              
                    await hubConnection.SendAsync("RemoveGroupAsync", groupChatId, groupName);

                    StateHasChanged();
            }
            else
            {
                Console.WriteLine("SignalR Hub connection is not in the Connected state.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteGroupAsync: {ex.Message}");
        }
    }

    async Task ToggleEditMode()
    {
        IsEditing = !IsEditing;

        var currentName = GroupName;

        Console.WriteLine(currentName);

        if (IsEditing)
        {
            Console.WriteLine("Entering Edit Mode");
        }
        else
        {

            await EditGroupName();
        }
    } 

    async Task EditGroupName()
    {
        IsEditing = false;

        var input = new GroupToUpdate
            {
                Name = GroupName
            };

        Console.WriteLine(GroupName, GroupChatId);

        var result = await ClientGroupChatService.UpdateGroup(GroupChatId, input);
        var groupName = await ClientGroupChatService.GetGroupName(GroupChatId);

        await hubConnection.SendAsync("GroupNameUpdated", GroupChatId, input);
    }
} 