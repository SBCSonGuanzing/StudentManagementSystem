@page "/group-chat"
@page "/group-chat/{GroupChatId:int}"

@using StudentSystem.Client.Services.ChatServices
@using StudentSystem.Client.Services.GroupChatServices
@using StudentSystem.Client.Services.UserServices
@using Microsoft.JSInterop;

@inject IDialogService DialogService
@inject IClientChatService ClientChatService
@inject IClientUserService ClientUserService
@inject IClientGroupChatService ClientGroupChatService
@inject NavigationManager NavigationManager
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime

@rendermode InteractiveWebAssembly

<div class="d-flex flex-grow-1 flex-row">

    <!--Group Chat Rooms-->

    <MudPaper Elevation="25" Class="pa-4 ml-6 mud-theme-primary col-md-3">
        <MudToolBar Dense="true">
            <MudIcon Icon="@Icons.Material.Filled.Groups" Style="margin-right:10px" />
            <MudText Typo="Typo.h6">Chat Rooms</MudText>
            <MudSpacer />           
            <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.AddCircle" Margin="Margin.MarginEnd" />            
            </MudButton>        
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var group in Groups)
                {
                    <MudListItem OnClick="@(() => LoadUserChat(group.Id))">@group.Name</MudListItem>
                    <MudDivider />
                }
            </MudList>
        </div>
    </MudPaper>

    <!--Group Chat Convo-->

    <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-5">
        <MudToolBar Dense="true">
            @if (string.IsNullOrEmpty(GroupChatId.ToString()))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person"
                         Style="margin-right:10px" />
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble"
                         Style="margin-right:10px" />
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                if (message.User.Id.ToString() == CurrentUserId)
                {
                    <div class="d-flex flex-row my-4">
                        <div class="ml-auto mr-4">
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                <MudImage Src="@message.User.Avatar"></MudImage>
                            </MudAvatar>
                        </div>
                        <div class="text-right">
                            <MudText Typo="Typo.body1">@message.User.Email</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Timestamp</MudText>
                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                    @message.Content
                            </MudText>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <MudAvatar Color="Color.Secondary"
                                       Style="height:50px; width:50px;">
                                <MudImage Src="@message.User.Avatar"></MudImage>
                            </MudAvatar>
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.User.Email</MudText>
                                <MudText Typo="Typo.caption"
                                         Style="font-size: xx-small!important;">
                                    @message.Timestamp
                            </MudText>
                            <MudText Typo="Typo.body2"
                                     Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                @message.Content
                            </MudText>
                        </div>
                    </div>
                }
            }
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string"
                          Placeholder="Enter your message..."
                          DisableUnderLine="true"
                          Class="mt-n2 mx-4"
                          @bind-Value="CurrentMessage"
                          For="@(()=> CurrentMessage)" />

            <MudButton OnClick="SendMessageAsync"
                       StartIcon="@Icons.Material.Outlined.Send"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Button">
                Send
            </MudButton>
        </MudPaper>
    </MudPaper>

    <!--Group Chat Members-->
     
    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-4">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">contacts</MudText>
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var user in Members)
                {
                    <MudListItem Class="pa-0 px-2" >
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4">
                                <MudBadge Content="3" Overlap="true" Class="my-4">                                                                                                
                                        <MudAvatar Color="Color.Dark"
                                                   Style="height:50px; width:50px;">
                                            <MudImage Src="@user.Avatar"></MudImage>
                                        </MudAvatar>                                  
                                </MudBadge>
                            </div>
                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.Email</MudText>
                                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@user.Id</MudText>
                                </div>
                            </div>
                        </MudListItem>
                }
            </MudList>
        </div> 
    </MudPaper>

</div>

@code {

    [Parameter]
    public int GroupChatId { get; set; }

    [CascadingParameter]
    private HubConnection hubConnection { get; set; }

    public string CurrentMessage { get; set; }
    public string CurrentUserId { get; set; }
    public string CurrentUserEmail { get; set; }
    public string ContactEmail { get; set; }

    private string userInput;
    private string groupInput;

    private List<GroupChatMessage> messages = new List<GroupChatMessage>();
    public List<GroupChat> Groups = new List<GroupChat>();
    public List<User> Members = new List<User>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    private async Task OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var parameters = new DialogParameters();
        var result = await DialogService.Show<Dialog>("Create Room", parameters, closeOnEscapeKey).Result;

        if (result != null && !result.Cancelled)
        {
            groupInput = result.Data?.ToString();
            Console.WriteLine(groupInput);
            await CreateGroupAsync(groupInput);
        }
        else
        {
            Console.WriteLine("Dialog was closed or canceled.");
        }
    }

    async Task LoadUserChat(int groupChatId)
    {
        string groupName = await ClientGroupChatService.GetGroupName(GroupChatId);

        Console.WriteLine(groupName);

        if (GroupChatId != 0)
        {
            await hubConnection.SendAsync("RemoveGroup", groupName);
        }

        GroupChatId = groupChatId;

        string passGroupName = await ClientGroupChatService.GetGroupName(GroupChatId);

        await hubConnection.SendAsync("JoinGroup", passGroupName);
        NavigationManager.NavigateTo($"group-chat/{GroupChatId}");

        messages = new List<GroupChatMessage>();
        messages = await ClientGroupChatService.GetConversationAsync(groupChatId);
        Members = await ClientGroupChatService.GetGroupChatMembers(groupChatId);
    }

    protected override async Task OnInitializedAsync()
    {
        Groups = await ClientGroupChatService.GetAllGroup();
        CurrentUserEmail = await ClientUserService.GetUserEmail();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat-hub"))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        // Register hub methods only when the connection is active
        hubConnection.On<GroupChat>("ReceivedGroupName", async (input) =>
        {
            Console.WriteLine("Connected: Connection ID: " + hubConnection.ConnectionId);
            Groups.Add(input);
            StateHasChanged();
        });

        hubConnection.On<GroupChatMessage>("ReceivedGroupMessage", async (message) =>
        {
            Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

            messages.Add(new GroupChatMessage
                    {
                        Content = message.Content,
                        Timestamp = message.Timestamp,
                        User = new User() { Email = CurrentUserEmail }
                    });
            StateHasChanged();        
        });
    }

    public async Task SendMessageAsync()
    {
        string currentGroup = await ClientGroupChatService.GetGroupName(GroupChatId);

        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && GroupChatId != 0)
            {
                // Save Message to DB
                var chatHistory = new GroupChatMessage()
                    {
                        Timestamp = DateTime.Now,
                        Content = CurrentMessage,
                        GroupChatId = GroupChatId
                    };

                await ClientGroupChatService.SaveMessagesAsync(chatHistory);

                // Call the hub method to send the message to the group
                await hubConnection.SendAsync("SendMessageToGroup", currentGroup, chatHistory);

                CurrentMessage = string.Empty;
            }
        }
        else
        {
            // Handle the case when the connection is not active
            Console.WriteLine("Connection is not active.");
        }
    }

    // Method to Create a Group Chat
    private async Task CreateGroupAsync(string groupName)
    {
        GroupChatDTO input = new GroupChatDTO()
            {
                Name = groupName
            };

        await ClientGroupChatService.CreateGroupChat(input);
        await hubConnection.SendAsync("CreateGroup", input);
    }
}