@page "/big-chat"
@page "/big-chat/{OriginalId:int}/{ReceiversId:int}"

@using StudentSystem.Client.Services.BigBrotherChatServices
@using StudentSystem.Client.Services.ChatServices
@using StudentSystem.Client.Services.GroupChatServices
@using StudentSystem.Client.Services.UserServices
@using Microsoft.JSInterop;

@inject IClientChatService ClientChatService
@inject IClientGroupChatService ClientGroupChatService
@inject IClientBigBrotherChatService ClientBigBrotherChatService
@inject IClientUserService ClientUserService
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime

@rendermode InteractiveWebAssembly

<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-8 ">
        <MudToolBar Dense="true">
            @if (string.IsNullOrEmpty(OriginalId.ToString()))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person"
                         Style="margin-right:10px" />
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble"
                         Style="margin-right:10px" />
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                if (message.User.Id == ReceiversId)
                {
                    Console.WriteLine("Right Side");

                    Console.WriteLine("Current User: ", message.User.Email, "Current UserId: ", message.User.Id);
                    Console.WriteLine(CurrentUserId);
                    Console.WriteLine(message.Content);

                    <div class="d-flex flex-row my-4">
                        <div class="ml-auto mr-4">
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                <MudImage Src="@message.User.Avatar"></MudImage>
                            </MudAvatar>
                        </div>
                        <div class="text-right">
                            <MudText Typo="Typo.body1">@message.User.Email</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Timestamp</MudText>
                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                    @message.Content
                            </MudText>
                        </div>
                    </div>
                }
                else
                {
                    Console.WriteLine("Left Side");
                    Console.WriteLine(CurrentUserId);
                    Console.WriteLine(message.Content);
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <MudAvatar Color="Color.Secondary"
                                       Style="height:50px; width:50px;">
                                <MudImage Src="@message.User.Avatar"></MudImage>
                            </MudAvatar>
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.User.Email</MudText>
                                <MudText Typo="Typo.caption"
                                         Style="font-size: xx-small!important;">
                                    @message.Timestamp
                            </MudText>
                            <MudText Typo="Typo.body2"
                                     Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                @message.Content
                            </MudText>
                        </div>
                    </div>
                }
            }
        </div>
       
    </MudPaper>
    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-4 mud-theme-primary">

        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">contacts</MudText>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">

            <MudList Clickable="true">
                @foreach (var user in ChatUsers)
                {
                    <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.Id))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4">
                                <MudBadge Content="3" Overlap="true" Class="my-4">
                                    @if (user.Id == OriginalId)
                                    {
                                        <MudAvatar Color="Color.Secondary"
                                                   Style="height:50px; width:50px;">
                                            <MudImage Src="@user.Avatar"></MudImage>
                                        </MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Dark"
                                                   Style="height:50px; width:50px;">
                                            <MudImage Src="@user.Avatar"></MudImage>
                                        </MudAvatar>
                                    }
                                </MudBadge>
                            </div>
                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.Email</MudText>
                                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@user.Id</MudText>
                                </div>
                            </div>
                        </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>
</div>

@code {

    [Parameter]
    public int OriginalId { get; set; } 
    
    [Parameter]
    public int ReceiversId { get; set; }

    [CascadingParameter]
    private HubConnection hubConnection { get; set; }

    public string CurrentMessage { get; set; }
    public string CurrentUserId { get; set; }
    public string CurrentUserEmail { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    private List<ChatMessage> messages = new List<ChatMessage>();
    public List<User> ChatUsers = new List<User>();

    public string ContactEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChatUsers = await ClientChatService.GetUsersAsync();


        string token = await _localStorage.GetItemAsStringAsync("token");
        string foo = token.Replace("\"", "");

        hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/chat-hub"), options =>
                    {
                        options.AccessTokenProvider = async () => foo;

                    }).WithAutomaticReconnect().Build();

        await hubConnection.StartAsync();

        hubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
        {
            Console.WriteLine("Connected: Connection ID: " + hubConnection.ConnectionId);

            if ((OriginalId == message.ToUserId && CurrentUserId == message.FromUserId.ToString())
            || (OriginalId == message.FromUserId && CurrentUserId == message.ToUserId.ToString()))
            {
                if ((OriginalId == message.ToUserId && CurrentUserId == message.FromUserId.ToString()))
                {
                    messages.Add(new ChatMessage { Content = message.Content, Timestamp = message.Timestamp, User = message.User });
                    Console.Write(userName);
                    await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", OriginalId, CurrentUserId);
                }
                else if ((OriginalId == message.FromUserId && CurrentUserId == message.ToUserId.ToString()))
                {
                    messages.Add(new ChatMessage { Content = message.Content, Timestamp = message.Timestamp, User = message.User });
                    await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", OriginalId, CurrentUserId);

                }
            }
            StateHasChanged();
        });

        CurrentUserId = await ClientUserService.GetUserId();
        CurrentUserEmail = await ClientUserService.GetUserEmail();

        if (!string.IsNullOrEmpty(OriginalId.ToString()))
        {
            await LoadUserChat(OriginalId);
        }
    }

   
    async Task LoadUserChat(int userId)
    {
        var contact = await ClientChatService.GetUserDetailsAsync(userId);

        if (contact != null)
        {
            OriginalId = contact.Id;
            ContactEmail = contact.Email;
            NavigationManager.NavigateTo($"big-chat/{OriginalId}/{ReceiversId}");
            messages = new List<ChatMessage>();
            messages = await ClientBigBrotherChatService.GetConversationAsync(ReceiversId, OriginalId);
        }
        else
        {

        }
    }

}