@page "/book/{id:int}"
@page "/book"

@using StudentSystem.Client.Services.BookServices
@using StudentSystem.Client.Services.EnrolledSubjectsService
@using StudentSystem.Client.Services.SubjectServices

@inject HttpClient Http
@inject IClientBookService clientBookService
@inject IClientSubjectService clientSubjectService
@inject IClientEnrolledSubjectService clientEnrolledSubjectService

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (id == 0)
{
    <PageTitle>New Book</PageTitle>
    <h2>Create a New Book</h2>
}
 
else {
    <PageTitle>Edit @book.Name</PageTitle>
    <h2>Edit @book.Name</h2>
}

<EditForm Model="book" OnValidSubmit="HandleSubmit">

    @if (id == 0)
    {
        <DataAnnotationsValidator />
    }

    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="@book.Name"
                          For="@(() => book.Name)">
            </MudTextField>
         
        </MudCardContent>
    </MudCard>


    <br />

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">@(isNew ? "Create Book" : "Update Book")</MudButton>
    @if (!isNew)
    {
        <MudButton ButtonType="ButtonType.Button"
                   OnClick="() => DeleteBook(book.Id)"
                   Color="Color.Error"
                   Variant="Variant.Filled">
            Delete Book
        </MudButton>
    }
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    string btnText = string.Empty;

    bool isNew = true;

    public Book book = new Book();
    public BookDTO books = new BookDTO();
    List<EnrolledSubjectsDTO> EnrolledSubjectsList = new List<EnrolledSubjectsDTO>();


    protected override async void OnInitialized()
    {
        btnText = id == 0 ? "Save New Book" : "Update Book";

        await clientSubjectService.GetAllSubjects();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            var result = await clientBookService.GetSingleBook((int)id);
            if (result != null)
            {
                book = result;
                books.Name = book.Name;
                isNew = false;
            }
            else
            {
                NavigationManager.NavigateTo("/all-books");
            }
        }
    }

    async Task HandleSubmit()
    {
        if (id == 0)
        {

            if (string.IsNullOrEmpty(book.Name))
            {
                Snackbar.Add(
                   "No Books Added",
                   Severity.Error, // Change Severity to Error for no subject added
                   config =>
                   {
                       config.ShowTransitionDuration = 200;
                       config.HideTransitionDuration = 400;
                       config.VisibleStateDuration = 2500;
                   });
                NavigationManager.NavigateTo("/all-books");
        
            }
            else
            {
                await clientBookService.AddBook(books);
            }

        }
        else
        {
            await clientBookService.UpdateBook((int)id, books);
            Snackbar.Add(
                "Update Book Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
        }
    }

    async void DeleteBook(int id)
    {
        await clientBookService.DeleteBook(id);
        StateHasChanged();
        Snackbar.Add(
                "Deleted Book Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
    }

}