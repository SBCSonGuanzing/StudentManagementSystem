@page "/big-group-chat"
@page "/big-group-chat/{GroupChatId:int}/{UserId:int}"

@using MudBlazor
@using StudentSystem.Client.Services.BigBrotherServices
@using StudentSystem.Client.Services.ChatServices
@using StudentSystem.Client.Services.GroupChatServices
@using StudentSystem.Client.Services.UserServices
@using Microsoft.JSInterop;

@inject IDialogService DialogService

@inject IClientChatService ClientChatService
@inject IClientUserService ClientUserService
@inject IClientGroupChatService ClientGroupChatService
@inject IClientBigBrotherService ClientBigBrotherService
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveWebAssembly

@if (isLoading)
{

}
else
{

      
    <div class="d-flex flex-grow-1 flex-row">

        <!--Group Chat Rooms-->

        <MudPaper Elevation="25" Class="pa-4 ml-6 mud-theme-primary col-md-3">
            <MudToolBar Dense="true" Class="d-flex justify-content-around">
                <MudIcon Icon="@Icons.Material.Filled.Groups" />
                <MudText Typo="Typo.h6">Chat Rooms</MudText>
               
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                <MudList Clickable="true">
                    <MudList Clickable="true">
                        @foreach (var group in Groups)
                        {
                            <MudListItem id="@group.Id" OnClick="@(() => LoadUserChat(group.Id))">@group.Name</MudListItem>
                            <MudDivider />
                        }
                    </MudList>

                </MudList>
            </div>
        </MudPaper>

        <!--Group Chat Convo-->

        <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-5">
           


            <div class="d-flex flex-column px-4" style="max-height: 80vh; min-height: 80vh; overflow: scroll;" id="chatContainer">
                @foreach (var message in messages)
                {
                    Console.WriteLine(message.Id);
                    <div class="d-flex flex-row my-4 @((message?.User?.Id.ToString() == UserId.ToString()) ? "justify-content-end" : "")">
                        <div class="mr-4">
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                <MudImage Src="@message.User.Avatar"></MudImage>
                            </MudAvatar>
                        </div>
                        <div class="@((message?.User?.Id == UserId) ? "text-right" : "")">
                            <MudText Typo="Typo.body1">@message.User.Email</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Timestamp</MudText>
                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                    @message.Content
                            </MudText>
                        </div>
                    </div>
                }
            </div>

  

        </MudPaper>

        <!--Group Chat Members-->

        <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-4">
            <MudToolBar Dense="true" Class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.PermContactCalendar" Style="margin-right:10px" />
                <MudText Typo="Typo.h6">Members</MudText>
            </MudToolBar>

            <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
               

                <MudList Clickable="true">
                    @foreach (var user in Members.users)
                    {
                        @if (user.Id == Members.OwnerId) continue;


                        <MudListItem Class="pa-2">
                            <div class="d-flex align-items-center">
                                <div class="mr-3">
                                    <MudBadge Color="@GetAvatarColor(user.ActiveStatus)" Overlap="true" Class="my-4">
                                        <MudAvatar Style="height:50px; width:50px;">
                                            <MudImage Src="@user.Avatar"></MudImage>
                                        </MudAvatar>
                                    </MudBadge>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mb-2">@user.Email</MudText>
                                        <MudText Typo="Typo.caption" Style="font-size: x-small!important;">@user.Id</MudText>
                                    </div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </div>
        </MudPaper>
    </div>
}

@code {

    [Parameter]
    public int GroupChatId { get; set; }

    [Parameter]
    public int UserId { get; set; }


    [CascadingParameter]
    private HubConnection hubConnection { get; set; }

    private bool isLoading { get; set; } = true;
    private string onl = "Color.Dark";
    public string CurrentMessage { get; set; }
    public string CurrentUserId { get; set; }
    public string CurrentUserEmail { get; set; }
    public string GroupName { get; set; }
    private IEnumerable<int> selectedUserIds { get; set; } = new HashSet<int>();

    public int OwnerId { get; set; }
    public bool isSelected;
    private string userInput;
    private string groupInput;
    public int userId;


    public List<User> Users = new List<User>();
    private int selectedUserId = 0;

    private List<GroupChatMessage> messages = new List<GroupChatMessage>();
    public List<GroupChat> Groups = new List<GroupChat>();
    public GetChatMembersDTO Members = new GetChatMembersDTO();

    bool IsEditing { get; set; } = false;

    MudBlazor.Color GetAvatarColor(bool isActive)
    {
        return isActive ? Color.Success : Color.Error; // Change colors as needed
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Ensure that the chatContainer element is not null
                var chatContainerRef = await _jsRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", "chatContainer");

                if (chatContainerRef != null)
                {
                    // Scroll to the bottom only if the chatContainer is found
                    await chatContainerRef.InvokeVoidAsync("ScrollToBottom");
                }
                else
                {
                    Console.WriteLine("Error: chatContainer element not found.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during JavaScript interop: {ex.Message}");
            }
        }
    }

    async Task LoadUserChat(int groupChatId)
    {
        if (GroupChatId != 0)
        {
            isSelected = false;
        }

        if (hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine($"Connected: Connection ID: {hubConnection.ConnectionId}");

            string groupName = await ClientGroupChatService.GetGroupName(GroupChatId);


            if (GroupChatId != 0)
            {
                await hubConnection.SendAsync("RemoveGroup", groupName);
            }

            GroupChatId = groupChatId;

            string passGroupName = await ClientGroupChatService.GetGroupName(GroupChatId);
            await hubConnection.SendAsync("JoinGroup", passGroupName);

            NavigationManager.NavigateTo($"big-group-chat/{GroupChatId}/{UserId}");

            messages = new List<GroupChatMessage>();
            messages = await ClientBigBrotherService.GetConversationAsync(groupChatId, UserId);
            Members = await ClientBigBrotherService.GetGroupChatMembers(groupChatId, UserId);
            StateHasChanged();

            var user = Members.users.First(user => user.Email == CurrentUserEmail);
            if (user != null && user.ActiveStatus == false)
            {
                user.ActiveStatus = true;

                var status = ClientGroupChatService.UpdateOnlineStatus(user.Id, user.ActiveStatus);

            }
            // Invoke StateHasChanged only if the user is not the current user
            if (user.Id != UserId)
            {
                InvokeAsync(StateHasChanged);
            }

            OwnerId = Members.OwnerId;
            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);

            GroupName = await ClientGroupChatService.GetGroupName(groupChatId);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the user ID from the query parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.ContainsKey("userId") && int.TryParse(queryParams["userId"], out int id))
        {
            userId = id;
        } 

        if (GroupChatId == 0)
        {
            isSelected = true;
        }
        else
        {
            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
            isSelected = false;
        }

        CurrentUserId = await ClientUserService.GetUserId();
        Groups = await ClientBigBrotherService.GetAllGroup(UserId);
        CurrentUserEmail = await ClientUserService.GetUserEmail();

        InvokeAsync(StateHasChanged);

        string token = await _localStorage.GetItemAsStringAsync("token");
        string foo = token.Replace("\"", "");

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat-hub"), options =>
            {
                options.AccessTokenProvider = async () => foo;

            }).WithAutomaticReconnect().Build();

        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        await hubConnection.SendAsync("GetEmail", CurrentUserEmail);

        hubConnection.On<GroupChat>("ReceivedGroupName", async (input) =>
        {
            Groups.Add(input);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GroupChatMessage>("ReceivedGroupMessage", async (message) =>
        {

            var groupName = ClientGroupChatService.GetGroupName(message.GroupChatId);

            if (GroupChatId == message.GroupChatId)
            {
                messages.Add(new GroupChatMessage
                    {
                        Content = message.Content,
                        Timestamp = message.Timestamp,
                        User = message.User
                    });

            }
            StateHasChanged();
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
        });

        hubConnection.On<GroupChatMessage>("ReceiveGroupChatNotification", async (request) =>
        {
                _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");

            _snackbar.Add($"{request.User.Email} has send a message", Severity.Info, config =>
               {
                   config.VisibleStateDuration = 10000;
                   config.HideTransitionDuration = 500;
                   config.ShowTransitionDuration = 500;
                   config.Action = "Chat?";
                   config.ActionColor = Color.Info;
                   config.Onclick = snackbar =>
               {
                   NavigationManager.NavigateTo($"big-group-chat/{request.GroupChatId}/{UserId}");
                   return Task.CompletedTask;
               };
               });

            StateHasChanged();
        });



        hubConnection.On<string>("ActiveStatus", async (email) =>
        {
            Console.WriteLine($"User: {email} is connected");

            var user = Members.users.First(user => user.Email == email);
            Console.WriteLine($"User: {email} is now active");

            if (user != null && user.ActiveStatus == false)
            {
                user.ActiveStatus = true;

                var status = ClientGroupChatService.UpdateOnlineStatus(user.Id, user.ActiveStatus);
            }

            InvokeAsync(StateHasChanged);
                
            // // Invoke StateHasChanged only if the user is not the current user
            // if (user.Id != int.Parse(CurrentUserId))
            // {
            //     InvokeAsync(StateHasChanged);
            // }
        });

        hubConnection.On<string>("InActiveStatus", async (email) =>
        {
            Console.WriteLine($"User: {email} has  disconnected");

            var user = Members.users.FirstOrDefault(user => user.Email == email);
            if (user != null)
            {
                user.ActiveStatus = false;

                if (user.Id != int.Parse(CurrentUserId))
                {
                    InvokeAsync(StateHasChanged);

                }
            }
        });


        hubConnection.On<User>("ReceiveUserToAdd", async (message) =>
        {
            Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

            Members.users.Add(new User
                {
                    Email = message.Email,
                    Avatar = message.Avatar,
                    Id = message.Id
                });

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<User>("ReceiveUserToRemove", async (userDetails) =>
        {
            var user = await ClientGroupChatService.GetUserDetailsAsync(userDetails.Id);

            var chatHistory = new GroupChatMessage()
                {
                    Timestamp = DateTime.Now,
                    Content = $"{userDetails.Email} has been removed!",
                    GroupChatId = GroupChatId,
                    User = user
                };

            messages.Add(chatHistory);
            StateHasChanged();

            await ClientGroupChatService.SaveMessagesAsync(chatHistory);
            StateHasChanged();
        });

        hubConnection.On<int>("ReceiveGroupToRemove", async (groupChatId) =>
        {
            Console.WriteLine("GroupID: ", groupChatId);
            Groups.RemoveAll(group => group.Id == groupChatId);
            NavigationManager.NavigateTo("/big-group-chat/0/{UserId}");
            Members.users.Clear();
            Users.Clear();
            messages.Clear();
            GroupName = "";
            ((HashSet<int>)selectedUserIds).Clear();
            ((HashSet<int>)selectedUserIds).Add(0);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, GroupToUpdate>("ReceiveGroupToUpdate", async (groupId, request) =>
        {
            var groupChatToUpdate = Groups.FirstOrDefault(g => g.Id == groupId);

            if (groupChatToUpdate != null)
            {
                groupChatToUpdate.Name = request.Name;
                InvokeAsync(StateHasChanged);
                Console.WriteLine("Group updated: " + groupChatToUpdate.Name);
            }
        });

        hubConnection.On<GroupChatMessage, string>("RemoveMemberNotification", async (message, userName) =>
    {
        if (GroupChatId == message.GroupChatId && CurrentUserId == message.UserId.ToString())
        {
            messages.Add(new GroupChatMessage
                {
                    Content = $"{userName} has been removed!",
                    Timestamp = message.Timestamp,
                    User = message.User
                });
        }
        StateHasChanged();
    });



        if (GroupChatId != 0)
        {
            await LoadUserChat(GroupChatId);
        }

        isLoading = false;
    }

    public async Task SendMessageAsync()
    {
        string currentGroup = await ClientGroupChatService.GetGroupName(GroupChatId);

        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && GroupChatId != 0)
            {
                var chatHistory = new GroupChatMessage()
                    {
                        Timestamp = DateTime.Now,
                        Content = CurrentMessage,
                        GroupChatId = GroupChatId,
                        UserId = int.Parse(CurrentUserId)
                    };


                await ClientGroupChatService.SaveMessagesAsync(chatHistory);
                InvokeAsync(StateHasChanged);

                var user = await ClientGroupChatService.GetUserDetailsAsync(int.Parse(CurrentUserId));

                chatHistory.User = user;

                await hubConnection.SendAsync("SendMessageToGroup", currentGroup, chatHistory);

                CurrentMessage = string.Empty;
            }

            InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine("Connection is not active.");
        }
    }

    private async Task CreateGroupAsync(string groupName, List<int>? selectedUsers)
    {
        GroupChatDTO input = new GroupChatDTO()
            {
                Name = groupName,
                MembersId = selectedUsers ?? new List<int>()
            };

        var result = await ClientGroupChatService.CreateGroupChat(input);

        input.Id = result;

        if (selectedUsers != null)
        {
            foreach (var userId in selectedUsers)
            {
                Console.WriteLine($"Selected User ID: {userId}");
                var userDetails = await ClientGroupChatService.GetUserDetailsAsync(userId);
                Console.WriteLine($"Selected User: {userDetails.Id}, {userDetails.Email}");
            }
        }

        if (result != null)
        {
            await hubConnection.SendAsync("CreateGroup", input);
        }
    }

    private async Task AddUser(IEnumerable<int> userIds, int groupChatId)
    {
        try
        {
            foreach (var userId in userIds)
            {
                var newUser = new AddUserToGroupDTO()
                    {
                        UserId = userId,
                        GroupChatId = groupChatId
                    };

                Console.WriteLine($"Added User: {newUser.UserId}");

                var result = await ClientGroupChatService.AddUserToGroup(newUser);

                if (result != null)
                {
                    string currentGroup = await ClientGroupChatService.GetGroupName(groupChatId);
                    var userToAdd = await ClientGroupChatService.GetUserDetailsAsync(userId);

                    await hubConnection.SendAsync("AddToGroup", currentGroup, userToAdd);
                }
            }

            Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
            StateHasChanged();
        }

        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred wh ile adding users to the group: {ex.Message}");

            _snackbar.Add(
                "An error occurred while adding users to the group.",
                Severity.Error,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
        }
    }

    async Task DeleteUser(int userId, int groupChatId)
    {
        string groupName = await ClientGroupChatService.GetGroupName(groupChatId);
        var user = await ClientGroupChatService.GetUserDetailsAsync(userId);


        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("RemoveUserGroup", groupName, user);
        }

        await Task.Delay(1000);

        Members.users.RemoveAll(u => u.Id == userId);
        InvokeAsync(StateHasChanged);

        var result = await ClientGroupChatService.RemoveUserToGroup(userId, groupChatId);
        InvokeAsync(StateHasChanged);

        Users = await ClientGroupChatService.GetNotMembers(GroupChatId);
        InvokeAsync(StateHasChanged);
    }


    async Task DeleteGroupAsync(int groupChatId)
    {

        Console.WriteLine(groupChatId);
        try
        {
            var groupName = await ClientGroupChatService.GetGroupName(groupChatId);
            if (groupName == null)
            {
                Console.Write("No group Name");
            }

            var userId = int.Parse(CurrentUserId);

            if (hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Connected to Signal R Hub");

                await ClientGroupChatService.RemoveGroupChat(groupChatId);

                await hubConnection.SendAsync("RemoveGroupAsync", groupChatId, groupName);

                InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.WriteLine("SignalR Hub connection is not in the Connected state.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteGroupAsync: {ex.Message}");
        }
    }

    async Task ToggleEditMode()
    {
        IsEditing = !IsEditing;

        var currentName = GroupName;

        Console.WriteLine(currentName);

        if (IsEditing)
        {
            Console.WriteLine("Entering Edit Mode");
        }
        else
        {

            await EditGroupName();
        }
    }

    async Task EditGroupName()
    {
        IsEditing = false;

        var input = new GroupToUpdate
            {
                Name = GroupName
            };

        Console.WriteLine(GroupName, GroupChatId);

        var result = await ClientGroupChatService.UpdateGroup(GroupChatId, input);
        var groupName = await ClientGroupChatService.GetGroupName(GroupChatId);

        await hubConnection.SendAsync("GroupNameUpdated", GroupChatId, input);
    }
} 