@using StudentSystem.Client.Services.AuthServices
@using StudentSystem.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IClientAuthService ClientAuthService 
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar

@layout AuthLayout 
@page "/login"

@if (errorMessage != null)
{
    <p class="text-danger text-center">@errorMessage</p>
}
<EditForm Model="user" OnValidSubmit="login">
    <DataAnnotationsValidator />
    <MudContainer Class="login-container d-flex flex-column justify-content-center " MaxWidth="MaxWidth.Small">
        <MudPaper Class="login-paper p-4 ">
            <div class="login-header">
                <h2>Login</h2>
            </div>
            <div class="login-body">
                <MudTextField Label="Email" @bind-Value="@user.Email" Variant="Variant.Outlined"
                              For="@(() => user.Email)">
                </MudTextField>

                <MudTextField Label="Password" @bind-Value="@user.Password"
                              Variant="Variant.Outlined"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="ButtonTestclick"
                              AdornmentAriaLabel="Show Password"
                              For="@(() => user.Password)">
                </MudTextField>

                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-5 mb-2">Login</MudButton>
                <div class="register-link">
                    <span>Don't have an account? </span>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Text" OnClick="HandleRegister">Register</MudButton>
                </div>
            </div>
        </MudPaper>
    </MudContainer>
    <br />
</EditForm>

<br />

@code {

    LoginDTO user = new LoginDTO();  
    private string? errorMessage;

    private async void login()
    {
        var response = await ClientAuthService.Login(user);
        var token = ClientAuthService.token.Value;

        if (response == "success")
        {
            await LocalStorageService.SetItemAsync("token", token);
            var auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
           
            Snackbar.Add(
            "Login Successful",
            Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });

            NavigationManager.NavigateTo("/dashboard");
            
        } else
        {
            errorMessage = response;
            StateHasChanged();
        }
    }

    private void HandleRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    public string Password { get; set; } = "superstrong123";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
