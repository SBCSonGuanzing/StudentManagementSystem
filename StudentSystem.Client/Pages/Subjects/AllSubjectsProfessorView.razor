@page "/all-subjects-professor-view"

@using StudentSystem.Client.Services.AuthServices
@using StudentSystem.Client.Services.EnrolledSubjectsService
@using StudentSystem.Client.Services.SubjectServices

@inject IClientSubjectService ClientSubjectService
@inject IClientEnrolledSubjectService ClientEnrolledSubjectService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Subjects</PageTitle>
<h1>Subject Taught</h1>

<MudTable Items="professorSubject" Hover="true" Striped="true" Dense="true" Class="mb-2">

    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate Context="subjectDetails">

        <MudTd DataLabel="Name">
            @subjectDetails.Subject.Name
        </MudTd> 

        <MudTd>
            <MudIconButton OnClick="() => editSubject(subjectDetails.Id)"
                           Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           Variant="Variant.Filled"></MudIconButton>
            <MudIconButton OnClick="() => deleteSubject(subjectDetails.Id)"
                           Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           Variant="Variant.Filled">
            </MudIconButton>
        </MudTd>

    </RowTemplate>
</MudTable>

<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" OnClick="AddSubject">Add Subject</MudButton>

@code {
    List<EnrolledSubjects> professorSubject = new List<EnrolledSubjects>();

    protected override async Task OnInitializedAsync()
    {
        await ClientSubjectService.GetAllSubjects();

        professorSubject = await ClientEnrolledSubjectService.GetProfessorStudents();
    }

    void AddSubject()
    {
        NavigationManager.NavigateTo("/subject");
    }

    async void deleteSubject(int id)
    {
        await ClientSubjectService.DeleteSubject(id);
        StateHasChanged();
        Snackbar.Add(

            "Deleted Subject Successfully",

            Severity.Success,

            config =>

            {
                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
    }


    void editSubject(int id) => NavigationManager.NavigateTo($"/subject/{id}");


}
