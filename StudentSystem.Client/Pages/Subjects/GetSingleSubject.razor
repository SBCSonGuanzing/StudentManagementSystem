@page "/subject/{id:int}"
@page "/subject"

@using StudentSystem.Client.Services.ProfessorServices
@using StudentSystem.Client.Services.SubjectServices
@using StudentSystem.Shared.DTOs
@using StudentSystem.Shared.Models
@inject HttpClient Http
@inject IClientSubjectService clientSubjectService
@inject IClientProfessorService ClientProfessorService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (id == 0)
{
    <PageTitle>New Subject</PageTitle>
    <h2>Create a New Subject</h2>
}

else
{
    <PageTitle>Edit @subject.Name</PageTitle>
    <h2>Edit @subject.Name</h2>
}

<EditForm Model="subjects" OnValidSubmit="HandleSubmit">

    @if (id == 0)
    {
        <DataAnnotationsValidator />
    }

    <MudCard>
        <MudCardContent>


            <MudTextField Label="Name" @bind-Value="@subjects.Name"
                          For="@(() => subjects.Name)">
            </MudTextField>

            @* MudMultiSelect *@

            @if(id == 0)
            {
                <MudSelect T="int"
                           Label="Professors"
                           MultiSelection="true"
                           @bind-SelectedValues="options">

                    @foreach (Professor professor in Professors)
                    {
                        <MudSelectItem T="int" Value="@professor.Id">@professor.LastName</MudSelectItem>
                    }
                </MudSelect>
            } 
            else
            {
                <MudSelect T="int"
                           Label="Professors"
                           MultiSelection="true"
                           @bind-SelectedValues="options">

                    @foreach (Professor professor in Professors)
                    {
                        <MudSelectItem T="int" Value="@professor.Id">@professor.LastName</MudSelectItem>
                    }
                </MudSelect>

            }

        </MudCardContent>
    </MudCard>
    <br />

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">@(isNew ? "Create Subject" : "Update Subject")</MudButton>
    @if (!isNew)
    {
        <MudButton ButtonType="ButtonType.Button"
                   OnClick="() => DeleteSubject(subject.Id)"
                   Color="Color.Error"
                   Variant="Variant.Filled">
            Delete Subject
        </MudButton>
    }
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    string btnText = string.Empty;
    bool isNew = true;
    public SubjectDTO subjects = new SubjectDTO();
    public Subject subject = new Subject();

    public List<Professor> Professors = new List<Professor>();

    List<EnrolledSubjectsDTO> EnrolledSubjectsList = new List<EnrolledSubjectsDTO>();

    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            var result = await clientSubjectService.GetSingleSubject((int)id);
            if (result != null)
            {

                subject = result;
                subjects.Name = result.Name;

                var Profs = await ClientProfessorService.GetAllProfessors();
                Professors = Profs;

                isNew = false;
            }
            else
            {
                NavigationManager.NavigateTo("/all-subjects");
            }
        }
        else
        {

            var result = await ClientProfessorService.GetAllProfessors();
            Professors = result;
        }
    }

    async Task HandleSubmit()
    {
        if (id == 0)
        {
            if(options != null)
            {
                subjects.ProfessorIds = new List<int>();
                foreach(int id in options)
                {

                    subjects.ProfessorIds.Add(id);
                }
                await clientSubjectService.AddSubject(subjects);
                Snackbar.Add(
                "Added Subject Successfully",
                Severity.Success,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
            } 
            else
            {
                Snackbar.Add(
                   "No Subject Added",
                   Severity.Error, // Change Severity to Error for no subject added
                   config =>
                   {
                       config.ShowTransitionDuration = 200;
                       config.HideTransitionDuration = 400;
                       config.VisibleStateDuration = 2500;
                   });
                NavigationManager.NavigateTo("/all-subjects");
            }
        }
        else
        {

            // subjects.ProfessorIds = new List<int>();
            // foreach (int id in options)
            // {

            //     subjects.ProfessorIds.Add(id);
            // }
            // await clientSubjectService.AddSubject(subjects);

            subjects.ProfessorIds = new List<int>();
            foreach (int id in options)
            {
                subjects.ProfessorIds.Add(id);
            }

            await clientSubjectService.UpdateSubject((int)id, subjects);
            Snackbar.Add(
                "Update Subject Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
        }
    }

    async void DeleteSubject(int id)
    {
        await clientSubjectService.DeleteSubject(id);
        StateHasChanged();
        Snackbar.Add(
                "Deleted Subject Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
    }

    // Code to Populate Multi Select

    private int value { get; set; } = 0;
    private IEnumerable<int> options { get; set; } = new HashSet<int>();

    private List<Professor> GetProf(int subjectId)
    {
        // Assuming clientSubjectService.subjects is a collection of subjects
        List<Professor> professors = subject.Professors ?? new List<Professor>();
        return professors;
    }
}