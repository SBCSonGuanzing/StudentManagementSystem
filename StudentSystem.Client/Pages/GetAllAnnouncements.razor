@page "/announcement";
@inject NavigationManager NavigationManager;

<h3>Announcement</h3>


<MudCard>
    <MudCardContent>
        @if (isConnected)
        {
            <MudTextField @bind-Value="@announcementInput" Label="Message" AutoGrow="true"/>
            <br />
            <MudButton OnClick="@Send" Variant="Variant.Filled" Color="Color.Secondary">Send</MudButton>
                
        }
        else
        {
            <span>Connecting...</span>
        }
    </MudCardContent>
</MudCard>

@if(isConnected)
{
    @foreach (var message in messages)
    {
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText>Announcement of the Day</MudText>
                <MudText Typo="Typo.body2">@message</MudText>
                </MudCardContent>
            </MudCard>
    }
}


@code {
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private string? announcementInput;

    protected override async Task OnInitializedAsync()
    {
        // Instance of Hub Connection

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/announcementhub"))
        .Build();

        hubConnection.On<string>("ReceiveAnnouncement", (message) =>
        {
            var encodedMessage = $"{message}";
            messages.Add(encodedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendAnnouncement", announcementInput);
        }

    }

    public bool isConnected => 
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
