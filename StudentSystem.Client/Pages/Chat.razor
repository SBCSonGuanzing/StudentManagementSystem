@page "/chat";
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (isConnected)
{
    <MudContainer>
        <MudPaper Elevation="2" Class="chat-container" Style="height: 500px; overflow-y: auto; padding: 16px;">
            @foreach (var message in messages)
            {
                <div class="message-container">
                    <div class="message-content">
                        <MudText Typo="Typo.h6">@message</MudText>
                            <MudText>@message</MudText>
                        </div>
                    </div>
            }
        </MudPaper>

        <MudContainer Class="input-container" Style="margin-top: 16px;">
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField Label="User"
                                  @bind-Value="@userInput"
                                  Variant="Variant.Outlined">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Message"
                                  @bind-Value="@messageInput"
                                  Variant="Variant.Text">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" md="2" Class="send-button d-md-flex justify-content-center">
                    <MudButton ButtonType="ButtonType.Submit"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               OnClick="Send">
                        Send
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudContainer>
}
else
{
    <MudContainer>
        <MudText Typo="Typo.h5">Connecting...</MudText>
    </MudContainer>
}


@code {
    // Invoke a Hub Connection
    private HubConnection? hubConnection;

    // Instance of List of Messages
    private List<string> messages = new List<string>();

    // Empty Input String
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        // Build a Hub Connection using HubConnectionBuilder
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chat-hub"))
        .Build();

        // Use the the Method to Send a Message
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMessage = $"{user}: {message}";
            messages.Add(encodedMessage);
            StateHasChanged();
        });


        // Start the Hub Connection
        await hubConnection.StartAsync();
    }

    // Method to Send a Message
    private async Task Send() => hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool isConnected => hubConnection.State == HubConnectionState.Connected;
}
