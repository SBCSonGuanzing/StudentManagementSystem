@using StudentSystem.Client.Pages
@using StudentSystem.Client.Services.AuthServices
@using StudentSystem.Client.Services.UserServices
@using Microsoft.AspNetCore.SignalR.Client;

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject IClientUserService ClientUserService
@inject IClientAuthService ClientAuthService
@inherits LayoutComponentBase
    
@rendermode InteractiveWebAssembly

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <LoginLogoutButton />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Variant="@DrawerVariant.Responsive" PreserveOpenState="@preserveOpenState" Breakpoint="@breakpoint">
            <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16" >
        <MudContainer Class="mt-6">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<audio id="notification" src="/media/Messenger Notification Sound Effect.mp3" />

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    bool open = false;
    bool dense = true;
    bool preserveOpenState = false;
    Breakpoint breakpoint = Breakpoint.Lg;
    void ToggleDrawer()
    {
        open = !open;
    }
    DrawerClipMode clipMode = DrawerClipMode.Never;

    private string CurrentUserId { get; set; }
    private HubConnection hubConnection;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {

        CurrentUserId = await ClientUserService.GetUserId();

        hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/chat-hub")).WithAutomaticReconnect().Build();

        await hubConnection.StartAsync();

        hubConnection.On<string, int, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId.ToString())
            {
                _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
                _snackbar.Add(message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = "Chat?";
                    config.ActionColor = Color.Info;
                    config.Onclick = snackbar => 
                    {
                        _navigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };

                });
            }
        });
    }

    
}